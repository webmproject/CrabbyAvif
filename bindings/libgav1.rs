/* automatically generated by rust-bindgen 0.69.4 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 37;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const LIBGAV1_MAJOR_VERSION: u32 = 0;
pub const LIBGAV1_MINOR_VERSION: u32 = 20;
pub const LIBGAV1_PATCH_VERSION: u32 = 0;
pub const LIBGAV1_VERSION: u32 = 5120;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const Libgav1ChromaSamplePosition_kLibgav1ChromaSamplePositionUnknown:
    Libgav1ChromaSamplePosition = 0;
pub const Libgav1ChromaSamplePosition_kLibgav1ChromaSamplePositionVertical:
    Libgav1ChromaSamplePosition = 1;
pub const Libgav1ChromaSamplePosition_kLibgav1ChromaSamplePositionColocated:
    Libgav1ChromaSamplePosition = 2;
pub const Libgav1ChromaSamplePosition_kLibgav1ChromaSamplePositionReserved:
    Libgav1ChromaSamplePosition = 3;
pub type Libgav1ChromaSamplePosition = ::std::os::raw::c_uint;
pub const Libgav1ImageFormat_kLibgav1ImageFormatYuv420: Libgav1ImageFormat = 0;
pub const Libgav1ImageFormat_kLibgav1ImageFormatYuv422: Libgav1ImageFormat = 1;
pub const Libgav1ImageFormat_kLibgav1ImageFormatYuv444: Libgav1ImageFormat = 2;
pub const Libgav1ImageFormat_kLibgav1ImageFormatMonochrome400: Libgav1ImageFormat = 3;
pub type Libgav1ImageFormat = ::std::os::raw::c_uint;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryBt709: Libgav1ColorPrimary = 1;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryUnspecified: Libgav1ColorPrimary = 2;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryBt470M: Libgav1ColorPrimary = 4;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryBt470Bg: Libgav1ColorPrimary = 5;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryBt601: Libgav1ColorPrimary = 6;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimarySmpte240: Libgav1ColorPrimary = 7;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryGenericFilm: Libgav1ColorPrimary = 8;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryBt2020: Libgav1ColorPrimary = 9;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryXyz: Libgav1ColorPrimary = 10;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimarySmpte431: Libgav1ColorPrimary = 11;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimarySmpte432: Libgav1ColorPrimary = 12;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryEbu3213: Libgav1ColorPrimary = 22;
pub const Libgav1ColorPrimary_kLibgav1MaxColorPrimaries: Libgav1ColorPrimary = 255;
pub type Libgav1ColorPrimary = ::std::os::raw::c_uint;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsBt709:
    Libgav1TransferCharacteristics = 1;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsUnspecified:
    Libgav1TransferCharacteristics = 2;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsBt470M:
    Libgav1TransferCharacteristics = 4;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsBt470Bg:
    Libgav1TransferCharacteristics = 5;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsBt601:
    Libgav1TransferCharacteristics = 6;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsSmpte240:
    Libgav1TransferCharacteristics = 7;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsLinear:
    Libgav1TransferCharacteristics = 8;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsLog100:
    Libgav1TransferCharacteristics = 9;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsLog100Sqrt10:
    Libgav1TransferCharacteristics = 10;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsIec61966:
    Libgav1TransferCharacteristics = 11;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsBt1361:
    Libgav1TransferCharacteristics = 12;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsSrgb:
    Libgav1TransferCharacteristics = 13;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsBt2020TenBit:
    Libgav1TransferCharacteristics = 14;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsBt2020TwelveBit:
    Libgav1TransferCharacteristics = 15;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsSmpte2084:
    Libgav1TransferCharacteristics = 16;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsSmpte428:
    Libgav1TransferCharacteristics = 17;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsHlg:
    Libgav1TransferCharacteristics = 18;
pub const Libgav1TransferCharacteristics_kLibgav1MaxTransferCharacteristics:
    Libgav1TransferCharacteristics = 255;
pub type Libgav1TransferCharacteristics = ::std::os::raw::c_uint;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsIdentity: Libgav1MatrixCoefficients =
    0;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsBt709: Libgav1MatrixCoefficients = 1;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsUnspecified:
    Libgav1MatrixCoefficients = 2;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsFcc: Libgav1MatrixCoefficients = 4;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsBt470BG: Libgav1MatrixCoefficients =
    5;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsBt601: Libgav1MatrixCoefficients = 6;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsSmpte240: Libgav1MatrixCoefficients =
    7;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsSmpteYcgco:
    Libgav1MatrixCoefficients = 8;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsBt2020Ncl: Libgav1MatrixCoefficients =
    9;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsBt2020Cl: Libgav1MatrixCoefficients =
    10;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsSmpte2085: Libgav1MatrixCoefficients =
    11;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsChromatNcl:
    Libgav1MatrixCoefficients = 12;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsChromatCl: Libgav1MatrixCoefficients =
    13;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsIctcp: Libgav1MatrixCoefficients = 14;
pub const Libgav1MatrixCoefficients_kLibgav1MaxMatrixCoefficients: Libgav1MatrixCoefficients = 255;
pub type Libgav1MatrixCoefficients = ::std::os::raw::c_uint;
pub const Libgav1ColorRange_kLibgav1ColorRangeStudio: Libgav1ColorRange = 0;
pub const Libgav1ColorRange_kLibgav1ColorRangeFull: Libgav1ColorRange = 1;
pub type Libgav1ColorRange = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1ObuMetadataHdrCll {
    pub max_cll: u16,
    pub max_fall: u16,
}
#[test]
fn bindgen_test_layout_Libgav1ObuMetadataHdrCll() {
    const UNINIT: ::std::mem::MaybeUninit<Libgav1ObuMetadataHdrCll> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Libgav1ObuMetadataHdrCll>(),
        4usize,
        concat!("Size of: ", stringify!(Libgav1ObuMetadataHdrCll))
    );
    assert_eq!(
        ::std::mem::align_of::<Libgav1ObuMetadataHdrCll>(),
        2usize,
        concat!("Alignment of ", stringify!(Libgav1ObuMetadataHdrCll))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cll) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1ObuMetadataHdrCll),
            "::",
            stringify!(max_cll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_fall) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1ObuMetadataHdrCll),
            "::",
            stringify!(max_fall)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1ObuMetadataHdrMdcv {
    pub primary_chromaticity_x: [u16; 3usize],
    pub primary_chromaticity_y: [u16; 3usize],
    pub white_point_chromaticity_x: u16,
    pub white_point_chromaticity_y: u16,
    pub luminance_max: u32,
    pub luminance_min: u32,
}
#[test]
fn bindgen_test_layout_Libgav1ObuMetadataHdrMdcv() {
    const UNINIT: ::std::mem::MaybeUninit<Libgav1ObuMetadataHdrMdcv> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Libgav1ObuMetadataHdrMdcv>(),
        24usize,
        concat!("Size of: ", stringify!(Libgav1ObuMetadataHdrMdcv))
    );
    assert_eq!(
        ::std::mem::align_of::<Libgav1ObuMetadataHdrMdcv>(),
        4usize,
        concat!("Alignment of ", stringify!(Libgav1ObuMetadataHdrMdcv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primary_chromaticity_x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1ObuMetadataHdrMdcv),
            "::",
            stringify!(primary_chromaticity_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primary_chromaticity_y) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1ObuMetadataHdrMdcv),
            "::",
            stringify!(primary_chromaticity_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).white_point_chromaticity_x) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1ObuMetadataHdrMdcv),
            "::",
            stringify!(white_point_chromaticity_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).white_point_chromaticity_y) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1ObuMetadataHdrMdcv),
            "::",
            stringify!(white_point_chromaticity_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).luminance_max) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1ObuMetadataHdrMdcv),
            "::",
            stringify!(luminance_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).luminance_min) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1ObuMetadataHdrMdcv),
            "::",
            stringify!(luminance_min)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1ObuMetadataItutT35 {
    pub country_code: u8,
    pub country_code_extension_byte: u8,
    pub payload_bytes: *mut u8,
    pub payload_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Libgav1ObuMetadataItutT35() {
    const UNINIT: ::std::mem::MaybeUninit<Libgav1ObuMetadataItutT35> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Libgav1ObuMetadataItutT35>(),
        24usize,
        concat!("Size of: ", stringify!(Libgav1ObuMetadataItutT35))
    );
    assert_eq!(
        ::std::mem::align_of::<Libgav1ObuMetadataItutT35>(),
        8usize,
        concat!("Alignment of ", stringify!(Libgav1ObuMetadataItutT35))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).country_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1ObuMetadataItutT35),
            "::",
            stringify!(country_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).country_code_extension_byte) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1ObuMetadataItutT35),
            "::",
            stringify!(country_code_extension_byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1ObuMetadataItutT35),
            "::",
            stringify!(payload_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1ObuMetadataItutT35),
            "::",
            stringify!(payload_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1DecoderBuffer {
    pub chroma_sample_position: Libgav1ChromaSamplePosition,
    pub image_format: Libgav1ImageFormat,
    pub color_range: Libgav1ColorRange,
    pub color_primary: Libgav1ColorPrimary,
    pub transfer_characteristics: Libgav1TransferCharacteristics,
    pub matrix_coefficients: Libgav1MatrixCoefficients,
    pub bitdepth: ::std::os::raw::c_int,
    pub displayed_width: [::std::os::raw::c_int; 3usize],
    pub displayed_height: [::std::os::raw::c_int; 3usize],
    pub stride: [::std::os::raw::c_int; 3usize],
    pub plane: [*mut u8; 3usize],
    pub spatial_id: ::std::os::raw::c_int,
    pub temporal_id: ::std::os::raw::c_int,
    pub hdr_cll: Libgav1ObuMetadataHdrCll,
    pub has_hdr_cll: ::std::os::raw::c_int,
    pub hdr_mdcv: Libgav1ObuMetadataHdrMdcv,
    pub has_hdr_mdcv: ::std::os::raw::c_int,
    pub itut_t35: Libgav1ObuMetadataItutT35,
    pub has_itut_t35: ::std::os::raw::c_int,
    pub user_private_data: i64,
    pub buffer_private_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Libgav1DecoderBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<Libgav1DecoderBuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Libgav1DecoderBuffer>(),
        184usize,
        concat!("Size of: ", stringify!(Libgav1DecoderBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<Libgav1DecoderBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(Libgav1DecoderBuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chroma_sample_position) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(chroma_sample_position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_format) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(image_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_range) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(color_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_primary) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(color_primary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transfer_characteristics) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(transfer_characteristics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matrix_coefficients) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(matrix_coefficients)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitdepth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(bitdepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayed_width) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(displayed_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayed_height) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(displayed_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plane) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(plane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spatial_id) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(spatial_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temporal_id) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(temporal_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr_cll) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(hdr_cll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_hdr_cll) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(has_hdr_cll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr_mdcv) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(hdr_mdcv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_hdr_mdcv) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(has_hdr_mdcv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).itut_t35) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(itut_t35)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_itut_t35) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(has_itut_t35)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_private_data) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(user_private_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_private_data) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderBuffer),
            "::",
            stringify!(buffer_private_data)
        )
    );
}
pub const Libgav1StatusCode_kLibgav1StatusOk: Libgav1StatusCode = 0;
pub const Libgav1StatusCode_kLibgav1StatusUnknownError: Libgav1StatusCode = -1;
pub const Libgav1StatusCode_kLibgav1StatusInvalidArgument: Libgav1StatusCode = -2;
pub const Libgav1StatusCode_kLibgav1StatusOutOfMemory: Libgav1StatusCode = -3;
pub const Libgav1StatusCode_kLibgav1StatusResourceExhausted: Libgav1StatusCode = -4;
pub const Libgav1StatusCode_kLibgav1StatusNotInitialized: Libgav1StatusCode = -5;
pub const Libgav1StatusCode_kLibgav1StatusAlready: Libgav1StatusCode = -6;
pub const Libgav1StatusCode_kLibgav1StatusUnimplemented: Libgav1StatusCode = -7;
pub const Libgav1StatusCode_kLibgav1StatusInternalError: Libgav1StatusCode = -8;
pub const Libgav1StatusCode_kLibgav1StatusBitstreamError: Libgav1StatusCode = -9;
pub const Libgav1StatusCode_kLibgav1StatusTryAgain: Libgav1StatusCode = -10;
pub const Libgav1StatusCode_kLibgav1StatusNothingToDequeue: Libgav1StatusCode = -11;
pub const Libgav1StatusCode_kLibgav1StatusReservedForFutureExpansionUseDefaultInSwitchInstead_:
    Libgav1StatusCode = -1000;
pub type Libgav1StatusCode = ::std::os::raw::c_int;
extern "C" {
    pub fn Libgav1GetErrorString(status: Libgav1StatusCode) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1FrameBuffer {
    pub plane: [*mut u8; 3usize],
    pub stride: [::std::os::raw::c_int; 3usize],
    pub private_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Libgav1FrameBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<Libgav1FrameBuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Libgav1FrameBuffer>(),
        48usize,
        concat!("Size of: ", stringify!(Libgav1FrameBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<Libgav1FrameBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(Libgav1FrameBuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plane) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1FrameBuffer),
            "::",
            stringify!(plane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1FrameBuffer),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).private_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1FrameBuffer),
            "::",
            stringify!(private_data)
        )
    );
}
pub type Libgav1FrameBufferSizeChangedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        callback_private_data: *mut ::std::os::raw::c_void,
        bitdepth: ::std::os::raw::c_int,
        image_format: Libgav1ImageFormat,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        left_border: ::std::os::raw::c_int,
        right_border: ::std::os::raw::c_int,
        top_border: ::std::os::raw::c_int,
        bottom_border: ::std::os::raw::c_int,
        stride_alignment: ::std::os::raw::c_int,
    ) -> Libgav1StatusCode,
>;
pub type Libgav1GetFrameBufferCallback = ::std::option::Option<
    unsafe extern "C" fn(
        callback_private_data: *mut ::std::os::raw::c_void,
        bitdepth: ::std::os::raw::c_int,
        image_format: Libgav1ImageFormat,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        left_border: ::std::os::raw::c_int,
        right_border: ::std::os::raw::c_int,
        top_border: ::std::os::raw::c_int,
        bottom_border: ::std::os::raw::c_int,
        stride_alignment: ::std::os::raw::c_int,
        frame_buffer: *mut Libgav1FrameBuffer,
    ) -> Libgav1StatusCode,
>;
pub type Libgav1ReleaseFrameBufferCallback = ::std::option::Option<
    unsafe extern "C" fn(
        callback_private_data: *mut ::std::os::raw::c_void,
        buffer_private_data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1FrameBufferInfo {
    pub y_buffer_size: usize,
    pub uv_buffer_size: usize,
    pub y_stride: ::std::os::raw::c_int,
    pub uv_stride: ::std::os::raw::c_int,
    pub y_plane_offset: usize,
    pub uv_plane_offset: usize,
    pub stride_alignment: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Libgav1FrameBufferInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Libgav1FrameBufferInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Libgav1FrameBufferInfo>(),
        48usize,
        concat!("Size of: ", stringify!(Libgav1FrameBufferInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Libgav1FrameBufferInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Libgav1FrameBufferInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_buffer_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1FrameBufferInfo),
            "::",
            stringify!(y_buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uv_buffer_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1FrameBufferInfo),
            "::",
            stringify!(uv_buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_stride) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1FrameBufferInfo),
            "::",
            stringify!(y_stride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uv_stride) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1FrameBufferInfo),
            "::",
            stringify!(uv_stride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_plane_offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1FrameBufferInfo),
            "::",
            stringify!(y_plane_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uv_plane_offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1FrameBufferInfo),
            "::",
            stringify!(uv_plane_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride_alignment) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1FrameBufferInfo),
            "::",
            stringify!(stride_alignment)
        )
    );
}
extern "C" {
    pub fn Libgav1ComputeFrameBufferInfo(
        bitdepth: ::std::os::raw::c_int,
        image_format: Libgav1ImageFormat,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        left_border: ::std::os::raw::c_int,
        right_border: ::std::os::raw::c_int,
        top_border: ::std::os::raw::c_int,
        bottom_border: ::std::os::raw::c_int,
        stride_alignment: ::std::os::raw::c_int,
        info: *mut Libgav1FrameBufferInfo,
    ) -> Libgav1StatusCode;
}
extern "C" {
    pub fn Libgav1SetFrameBuffer(
        info: *const Libgav1FrameBufferInfo,
        y_buffer: *mut u8,
        u_buffer: *mut u8,
        v_buffer: *mut u8,
        buffer_private_data: *mut ::std::os::raw::c_void,
        frame_buffer: *mut Libgav1FrameBuffer,
    ) -> Libgav1StatusCode;
}
pub type Libgav1ReleaseInputBufferCallback = ::std::option::Option<
    unsafe extern "C" fn(
        callback_private_data: *mut ::std::os::raw::c_void,
        buffer_private_data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1DecoderSettings {
    pub threads: ::std::os::raw::c_int,
    pub frame_parallel: ::std::os::raw::c_int,
    pub blocking_dequeue: ::std::os::raw::c_int,
    pub on_frame_buffer_size_changed: Libgav1FrameBufferSizeChangedCallback,
    pub get_frame_buffer: Libgav1GetFrameBufferCallback,
    pub release_frame_buffer: Libgav1ReleaseFrameBufferCallback,
    pub release_input_buffer: Libgav1ReleaseInputBufferCallback,
    pub callback_private_data: *mut ::std::os::raw::c_void,
    pub output_all_layers: ::std::os::raw::c_int,
    pub operating_point: ::std::os::raw::c_int,
    pub post_filter_mask: u8,
    pub parse_only: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Libgav1DecoderSettings() {
    const UNINIT: ::std::mem::MaybeUninit<Libgav1DecoderSettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Libgav1DecoderSettings>(),
        72usize,
        concat!("Size of: ", stringify!(Libgav1DecoderSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<Libgav1DecoderSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(Libgav1DecoderSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threads) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderSettings),
            "::",
            stringify!(threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_parallel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderSettings),
            "::",
            stringify!(frame_parallel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocking_dequeue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderSettings),
            "::",
            stringify!(blocking_dequeue)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).on_frame_buffer_size_changed) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderSettings),
            "::",
            stringify!(on_frame_buffer_size_changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_frame_buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderSettings),
            "::",
            stringify!(get_frame_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release_frame_buffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderSettings),
            "::",
            stringify!(release_frame_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release_input_buffer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderSettings),
            "::",
            stringify!(release_input_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_private_data) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderSettings),
            "::",
            stringify!(callback_private_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_all_layers) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderSettings),
            "::",
            stringify!(output_all_layers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operating_point) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderSettings),
            "::",
            stringify!(operating_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_filter_mask) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderSettings),
            "::",
            stringify!(post_filter_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parse_only) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Libgav1DecoderSettings),
            "::",
            stringify!(parse_only)
        )
    );
}
extern "C" {
    pub fn Libgav1DecoderSettingsInitDefault(settings: *mut Libgav1DecoderSettings);
}
extern "C" {
    pub fn Libgav1GetVersion() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Libgav1GetVersionString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Libgav1GetBuildConfiguration() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1Decoder {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Libgav1DecoderCreate(
        settings: *const Libgav1DecoderSettings,
        decoder_out: *mut *mut Libgav1Decoder,
    ) -> Libgav1StatusCode;
}
extern "C" {
    pub fn Libgav1DecoderDestroy(decoder: *mut Libgav1Decoder);
}
extern "C" {
    pub fn Libgav1DecoderEnqueueFrame(
        decoder: *mut Libgav1Decoder,
        data: *const u8,
        size: usize,
        user_private_data: i64,
        buffer_private_data: *mut ::std::os::raw::c_void,
    ) -> Libgav1StatusCode;
}
extern "C" {
    pub fn Libgav1DecoderDequeueFrame(
        decoder: *mut Libgav1Decoder,
        out_ptr: *mut *const Libgav1DecoderBuffer,
    ) -> Libgav1StatusCode;
}
extern "C" {
    pub fn Libgav1DecoderSignalEOS(decoder: *mut Libgav1Decoder) -> Libgav1StatusCode;
}
extern "C" {
    pub fn Libgav1DecoderGetMaxBitdepth() -> ::std::os::raw::c_int;
}
